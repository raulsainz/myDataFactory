{
	"name": "dflow_transform_admissions_weekly",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "HospitalAdmissions"
				},
				{
					"dataset": {
						"referenceName": "ds_country_lookup",
						"type": "DatasetReference"
					},
					"name": "countryLookUp"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "dimDatesLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_admissions_weekly",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "WeeklyOnly"
				},
				{
					"name": "RequiredFields"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "lookupDimDates"
				},
				{
					"name": "pivotCounts"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HospitalAdmissions",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countryLookUp",
				"source(output(",
				"          date_key as string,",
				"          date as date,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as integer,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimDatesLookup",
				"HospitalAdmissions filter(startsWith(indicator, 'Weekly')) ~> WeeklyOnly",
				"WeeklyOnly select(mapColumn(",
				"          country,",
				"          indicator,",
				"          year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RequiredFields",
				"pivotCounts, countryLookUp lookup(pivotCounts@country == countryLookUp@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"RequiredFields, dimDatesLookup lookup(left(RequiredFields@year_week,4) == year",
				"     && toInteger(right(RequiredFields@year_week,2)) == week_of_year,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupDimDates",
				"lookupDimDates pivot(groupBy(country,",
				"          source,",
				"          RequiredFields@year_week),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotCounts",
				"lookupCountry sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          population as string,",
				"          reported_date as string,",
				"          hospital_occupancy_count as string,",
				"          icu_occupancy_count as string,",
				"          source as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}